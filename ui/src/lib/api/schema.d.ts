/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/v1/users/{userId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get user information by ID
     * @description Returns user information for the specified user ID.
     */
    get: operations['getUser'];
    /** Update user data */
    put: operations['updateUser'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/account-books/{accountBookId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get account book by ID */
    get: operations['getAccountBook'];
    /** Update account book by ID */
    put: operations['updateAccountBook'];
    post?: never;
    /** Delete account book by ID */
    delete: operations['deleteAccountBook'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/account-books/{accountBookId}/records/{recordId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get record by ID */
    get: operations['getRecord'];
    /** Update an existing record */
    put: operations['updateRecord'];
    post?: never;
    /** Delete a record by ID */
    delete: operations['deleteRecord'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/invitations/{invitationId}/join': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Join an account book using an invitation */
    post: operations['joinInvitation'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/account-books': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List account books of user */
    get: operations['listAccountBooks'];
    put?: never;
    /** Create account book */
    post: operations['createAccountBook'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/account-books/{accountBookId}/records': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List records of account book */
    get: operations['listRecords'];
    put?: never;
    /** Create a new record */
    post: operations['createRecord'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/account-books/{accountBookId}/invitations': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List current valid invitations for an account book */
    get: operations['listInvitations'];
    put?: never;
    /** Create an invitation for an account book */
    post: operations['createInvitation'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/users/me': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get current logged-in user information
     * @description The user field is null if the user is not authenticated.
     */
    get: operations['getCurrentUser'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/oauth2/authorization/google': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Start Google OAuth2 authorization flow */
    get: operations['redirectToIdp'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/logout': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Logout from the application */
    get: operations['logout'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/account-books/{accountBookId}/invitations/{invitationId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Delete an invitation */
    delete: operations['deleteInvitation'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    UserUpdateRequest: {
      /** @example Bob */
      nickname?: string;
    };
    UserView: {
      /** Format: uuid */
      id?: string;
      roles?: ('USER' | 'ADMIN')[];
      /** @example Bob */
      nickname?: string;
      /** @enum {string} */
      idpType?: 'GOOGLE' | 'KAKAO' | 'NAVER';
      /** @example 19817852398 */
      idpIdentifier?: string;
      /** @example https://example.com/amazing-thumbnail */
      pictureUrl?: string;
      /** @example user@example.com */
      email?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    AccountBookUpdateRequest: {
      /** @example My Second Account Book */
      name?: string;
    };
    AccountBookView: {
      /** Format: uuid */
      id?: string;
      /** @example My Account Book */
      name?: string;
      members?: components['schemas']['MemberView'][];
      categories?: components['schemas']['CategoryView'][];
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    CategoryView: {
      /** Format: uuid */
      id?: string;
      /** @example Hobby */
      name?: string;
      isBasic?: boolean;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    MemberView: {
      /** Format: uuid */
      id?: string;
      /** Format: uuid */
      userId?: string;
      /** @enum {string} */
      role?: 'OWNER' | 'PARTICIPANT';
      /** @example Marilly */
      nickname?: string;
      /** @example https://example.com/pic.png */
      pictureUrl?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    RecordUpdateRequest: {
      /** Format: uuid */
      categoryId: string;
      /** @enum {string} */
      recordType: 'INCOME' | 'EXPENSE';
      /**
       * Format: int64
       * @example 4000
       */
      amount?: number;
      /** @example Five Guys */
      summary?: string;
      /** @example Hang out with Alice and Bob */
      description?: string;
      /** Format: date */
      date: string;
    };
    RecordView: {
      /** Format: uuid */
      id?: string;
      /** Format: uuid */
      userId?: string;
      /** @example Bob */
      userNickname?: string;
      /** @example https://example.com/thumbnail.png */
      userPictureUrl?: string;
      category?: string;
      /** @enum {string} */
      recordType?: 'INCOME' | 'EXPENSE';
      /**
       * Format: int64
       * @example 4000
       */
      amount?: number;
      /** @example Five Guys */
      summary?: string;
      /** @example Hang out with Alice and Bob */
      description?: string;
      /** Format: date */
      date?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    AccountBookCreateRequest: {
      /** @example My First Account Book */
      name?: string;
    };
    RecordCreateRequest: {
      /** Format: uuid */
      categoryId: string;
      /** @enum {string} */
      recordType: 'INCOME' | 'EXPENSE';
      /**
       * Format: int64
       * @example 4000
       */
      amount?: number;
      /** @example Five Guys */
      summary?: string;
      /** @example Hang out with Alice and Bob */
      description?: string;
      /** Format: date */
      date: string;
    };
    InvitationView: {
      /** Format: uuid */
      id?: string;
      /** Format: date-time */
      expiration?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    GetCurrentUserResponse: {
      user?: components['schemas']['UserView'];
    };
    AccountBookListResponse: {
      accountBooks?: components['schemas']['AccountBookSummaryView'][];
    };
    AccountBookSummaryView: {
      /** Format: uuid */
      id?: string;
      /** @example My Account Book */
      name?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    RecordListResponse: {
      records?: components['schemas']['RecordSummaryView'][];
      /** Format: int32 */
      page?: number;
      /** Format: int32 */
      pageSize?: number;
      /** Format: int32 */
      totalPages?: number;
      /** Format: int64 */
      totalElements?: number;
    };
    RecordSummaryView: {
      /** Format: uuid */
      id?: string;
      /** Format: uuid */
      userId?: string;
      /** @example Bob */
      userNickname?: string;
      /** @example https://example.com/thumbnail.png */
      userPictureUrl?: string;
      /** @example Foods */
      category?: string;
      /** @enum {string} */
      recordType?: 'INCOME' | 'EXPENSE';
      /**
       * Format: int64
       * @example 4000
       */
      amount?: number;
      /** @example Five Guys */
      summary?: string;
      /** Format: date */
      date?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    InvitationListResponose: {
      invitations?: components['schemas']['InvitationView'][];
    };
    /** @description Common error response structure */
    ErrorResponse: {
      /**
       * Format: int32
       * @example 404
       */
      status?: number;
      /** @example Not Found */
      statusText?: string;
      /**
       * @description Detailed error codes for the application
       * @example DETAILED_ERROR_CODE
       * @enum {string}
       */
      errorCode?:
        | 'BAD_REQUEST'
        | 'UNEXPECTED_IDP'
        | 'UNAUTHORIZED'
        | 'FORBIDDEN'
        | 'NOT_FOUND'
        | 'METHOD_NOT_ALLOWED'
        | 'CONFLICT'
        | 'UNPROCESSABLE_ENTITY'
        | 'INTERNAL_SERVER_ERROR'
        | 'NOT_IMPLEMENTED'
        | 'SERVICE_UNAVAILABLE';
      /** @example Something went wrong */
      message?: string;
      /** @example 123e4567-e89b-12d3-a456-426614174000 */
      requestId?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  getUser: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        userId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['UserView'];
        };
      };
      /** @description Error response */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  updateUser: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        userId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UserUpdateRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['UserView'];
        };
      };
      /** @description Error response */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  getAccountBook: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        accountBookId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['AccountBookView'];
        };
      };
      /** @description Error response */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  updateAccountBook: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        accountBookId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AccountBookUpdateRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['AccountBookView'];
        };
      };
      /** @description Error response */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  deleteAccountBook: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        accountBookId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Error response */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  getRecord: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        accountBookId: string;
        recordId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RecordView'];
        };
      };
      /** @description Error response */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  updateRecord: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        accountBookId: string;
        recordId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RecordUpdateRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RecordView'];
        };
      };
      /** @description Error response */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  deleteRecord: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        accountBookId: string;
        recordId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Error response */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  joinInvitation: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        invitationId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Error response */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  listAccountBooks: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['AccountBookListResponse'];
        };
      };
      /** @description Error response */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  createAccountBook: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AccountBookCreateRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['AccountBookView'];
        };
      };
      /** @description Error response */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  listRecords: {
    parameters: {
      query: {
        /** @example 1 */
        page: number;
        /** @example 20 */
        pageSize: number;
        categories?: string[];
        recordType?: 'INCOME' | 'EXPENSE';
        startDate?: string;
        endDate?: string;
        /** @example DESCENDING */
        direction: 'ASCENDING' | 'DESCENDING';
      };
      header?: never;
      path: {
        accountBookId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RecordListResponse'];
        };
      };
      /** @description Error response */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  createRecord: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        accountBookId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RecordCreateRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RecordView'];
        };
      };
      /** @description Error response */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  listInvitations: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        accountBookId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['InvitationListResponose'];
        };
      };
      /** @description Error response */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  createInvitation: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        accountBookId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['InvitationView'];
        };
      };
      /** @description Error response */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  getCurrentUser: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['GetCurrentUserResponse'];
        };
      };
      /** @description Error response */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  redirectToIdp: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Error response */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  logout: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Error response */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  deleteInvitation: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        accountBookId: string;
        invitationId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Error response */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
}
